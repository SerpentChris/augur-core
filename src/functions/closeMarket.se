# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256,int256]:int256, getMarketEvents:[int256]:int256[], getMarketNumOutcomes:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getNumEvents:[int256]:int256, getOneWinningOutcome:[int256,int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSender:[]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, getWinningOutcomes:[int256]:int256[], initializeMarket:[int256,int256[],int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[]]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, returnTags:[int256]:int256[], setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, setWinningOutcomes:[int256,int256[]]:int256]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256]

BACKSTOPS = self.controller.lookup('backstops')
extern backstops: [adjForkBondPaid:[int256,int256]:int256, doRoundTwoRefund:[int256,int256]:int256, getBondAmount:[int256]:int256, getBondPaid:[int256]:int256, getBondPoster:[int256]:int256, getBondReturned:[int256]:int256, getDisputedOverEthics:[int256]:int256, getFinal:[int256]:int256, getForkBondPaid:[int256]:int256, getForkBondPoster:[int256]:int256, getForkedOverEthicality:[int256]:int256, getMoved:[int256]:int256, getOriginalBranch:[int256]:int256, getOriginalEthicality:[int256]:int256, getOriginalOutcome:[int256]:int256, getOriginalVotePeriod:[int256]:int256, getResolved:[int256,int256]:int256, getRoundTwo:[int256]:int256, increaseBondPaid:[int256,int256]:int256, setBondAmount:[int256,int256]:int256, setBondPoster:[int256,int256]:int256, setBondReturned:[int256]:int256, setDisputedOverEthics:[int256]:int256, setFinal:[int256]:int256, setForkBondPoster:[int256,int256]:int256, setForkedOverEthicality:[int256]:int256, setMoved:[int256]:int256, setOriginalBranch:[int256,int256]:int256, setOriginalEthicality:[int256,int256]:int256, setOriginalOutcome:[int256,int256]:int256, setOriginalVotePeriod:[int256,int256]:int256, setResolved:[int256,int256,int256]:int256, setRoundTwo:[int256,int256]:int256, setRoundTwoRefund:[int256,int256]:int256]

DETERMINEOUTCOMES = self.controller.lookup('determineOutcomes')
extern determineOutcomes: [determineWinningOutcomes:[int256]:int256[]]

BINARYRESOLVE = self.controller.lookup('binaryMarketResolve')
extern binaryMarketResolve: [resolveBinary:[int256,int256,int256,int256]:int256]

NONBINARYRESOLVE = self.controller.lookup('nonBinaryMarketResolve')
extern nonBinaryMarketResolve: [resolveCategoricalOrScalar:[int256,int256,int256,int256,int256,int256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [getMutex:[]:int256, setMutex:[]:int256, unsetMutex:[]:int256]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/eventHelpers.sem')
inset('../macros/logReturn.sem')
inset('../macros/float.sem')

data controller

event closeMarketLogReturn(returnValue)

### This allows users to close markets
# Loop through events in the market, get their outcomes and use those to determine the winning outcomes and resolve a market!
# @return 1 if success
# Error messages otherwise
    # 0: hasn't been reported on yet or already resolved
    # -1: Market already closed
    # -2: 0 outcome / not reported on yet
    # -3: not final round 2 event
    # -4: Event forked and not final yet
    # -5: bonded pushed forward market not ready to be resolved
def init():
    self.controller = 0x0

def closeMarket(market, sender):
    refund()
    if (!isCallerWhitelisted()):
        MUTEX.acquire()
    event = MARKETS.getMarketEvent(market, 0)
    branch = EVENTS.getEventBranch(event)
    expiration = EVENTS.getExpiration(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    votingPeriodEvent = expiration / periodLength
    period = BRANCHES.getVotePeriod(branch)
    fxpOutcome = EVENTS.getOutcome(event)
    checkCloseMarketPreconditions()

    resolveEventsInMarket()
    winningOutcomes = array(8)
    winningOutcomes = DETERMINEOUTCOMES.determineWinningOutcomes(event, outitems = 8)
    MARKETS.setWinningOutcomes(market, winningOutcomes)
    # refunds closing cost
    MARKETS.refundClosing(market, sender)
    # send fees in market to branch
    marketCurrency = INFO.getCurrency(market)
    marketWallet = INFO.getWallet(market)
    marketWallet.transfer(BRANCHES.getBranchWallet(branch, marketCurrency), marketCurrency.balanceOf(marketWallet) - safeFxpMul(MARKETS.getSharesPurchased(market, 1), MARKETS.getCumulativeScale(market)))

    if(!isCallerWhitelisted()):
        MUTEX.release()
    logReturn(closeMarketLogReturn, 1)

macro checkCloseMarketPreconditions():
    # as long as resolved and not challenged we can then resolve, i.e. if not challenged and > 6 days then can take prelim outcome and make it final outcome
    if(period <= votingPeriodEvent || (!EVENTS.getChallenged(event) && block.timestamp < expiration + SIX_DAYS)):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        logReturn(closeMarketLogReturn, 0)
    if(MARKETS.getOneWinningOutcome(market, 0)):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        logReturn(closeMarketLogReturn, -1)
    if(!EVENTS.getUncaughtOutcome(event) && !EVENTS.getFirstPreliminaryOutcome(event)):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        logReturn(closeMarketLogReturn, -2)
    if(BACKSTOPS.getRoundTwo(event) and !BACKSTOPS.getFinal(event)):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        logReturn(closeMarketLogReturn, -3)
    # if an event is one from before a fork and hasn't been moved yet or it's the event the fork occurred over and it's not over yet don't resolve it
    if((EVENTS.getForked(event) and !EVENTS.getForkedDone(event)) or eventCreatedPriorToFork(eventID)):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        logReturn(closeMarketLogReturn, -4)

macro resolveEventsInMarket():
    resolution = 0
    # look at event in the market, get its outcomes, resolve it and use those to determine the winning outcomes for a given market!
    if(binary(event) and !fxpOutcome):
        resolution = RESOLVEBINARY.resolveBinary(event, market, branch, votingPeriodEvent)
    elif(scalar(event) and !EVENTS.getMode(event)):
        resolution = NONBINARYRESOLVE.resolveCategoricalOrScalar(EVENTS.getMinValue(event), EVENTS.getMaxValue(event), event, market, branch, votingPeriodEvent)
    elif(categorical(event) and !EVENTS.getMode(event)):
        resolution = NONBINARYRESOLVE.resolveCategoricalOrScalar(ONE, ONE * EVENTS.getNumOutcomes(event), event, market, branch, votingPeriodEvent)
    else:
        throw()
    if(resolution == -1):
        if(!isCallerWhitelisted()):
            MUTEX.release()
        logReturn(closeMarketLogReturn, -5)

def closeChallengeBond(event):
    branch = EVENTS.getEventBranch(event)
    periodLength = BRANCHES.getPeriodLength(branch)
    votePeriod = EVENTS.getExpiration(event) / periodLength
    forkPeriod = BRANCHES.getForkPeriod(branch)
    bondAmount = EVENTS.getExtraBond(event)
    if(BRANCHES.getVotePeriod(branch) <= votePeriod or !EVENTS.getChallenged(event)):
        throw()
    # sets bond as paid back
    EVENTS.setExtraBond(event, 0)
    if(BACKSTOPS.getRoundTwo(event)):
        # return bond
        if(!INFO.getWallet(event).transfer(EVENTS.getExtraBondPoster(event), bondAmount)):
            throw()
    if(!EVENTS.getOutcome(event)):
        throw()
    if(EVENTS.getFirstPreliminaryOutcome(event) == EVENTS.getOutcome(event)):
        # lose bond
        branchWallet = BRANCHES.getBranchWallet(branch, INFO.getCurrency(event))
        if(!INFO.getWallet(event).transfer(branchWallet, bondAmount)):
            throw()
    # outcome is different
    else:
        # return bond [and in resolve event contract give half of validity bond to extra bond poster as a reward for being correct]
        if(!INFO.getWallet(event).transfer(EVENTS.getExtraBondPoster(event), bondAmount)):
            throw()
    return(1)
