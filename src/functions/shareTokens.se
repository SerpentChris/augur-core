# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [getMutex:[]:int256, setMutex:[]:int256, unsetMutex:[]:int256]

### Token wrapper for shares

inset('../macros/refund.sem')

data accounts[2**160](balance, spenders[2**160](maxValue))

data controller

data totalSupply
# token name for display
data name
# token symbol for display
data symbol
# amount of decimals per unit of shares
data decimals

event Transfer(from:indexed, to:indexed, value)
event Approval(owner:indexed, spender:indexed, value)

def init():
    self.controller = 0x0
    self.name = "Shares"
    self.symbol = "SHARE"
    self.decimals = 18

def transfer(to: address, value: uint256):
    refund()
    if (!isCallerWhitelisted()):
        MUTEX.acquire()
    self.controller.checkWhitelist(msg.sender)
    senderBalance = self.accounts[msg.sender].balance
    if(senderBalance < value):
        throw()
    if(!safeToSubtract(senderBalance, value) or !safeToAdd(self.accounts[to].balance, value)):
        throw()
    # Update balances
    self.accounts[msg.sender].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, msg.sender, to, value)
    if(!isCallerWhitelisted()):
        MUTEX.release()
    return(1)

def transferFrom(from: address, to: address, value: uint256):
    refund()
    if (!isCallerWhitelisted()):
        MUTEX.acquire()
    self.controller.checkWhitelist(msg.sender)
    senderBalance = self.accounts[from].balance
    if(senderBalance < value or value > self.accounts[from].spenders[msg.sender].maxValue):
        throw()
    if(!safeToSubtract(senderBalance, value) or !safeToAdd(self.accounts[to].balance, value)):
        throw()
    self.accounts[from].spenders[msg.sender].maxValue -= value
    # Update balances
    self.accounts[from].balance -= value
    self.accounts[to].balance += value
    log(type = Transfer, from, to, value)
    if(!isCallerWhitelisted()):
        MUTEX.release()
    return(1)

def approve(spender: address, value: uint256):
    refund()
    if (!isCallerWhitelisted()):
        MUTEX.acquire()

    self.accounts[msg.sender].spenders[spender].maxValue = value
    log(type=Approval, msg.sender, spender, value)
    if(!isCallerWhitelisted()):
        MUTEX.release()
    return(1)

# Returns amount spender can withdraw from owner
# @return fxp
def allowance(owner: address, spender: address):
    return(self.accounts[address].spenders[spender].maxValue)

# @return fxp
def totalSupply():
    return(self.totalSupply)

# @return fxp
def balanceOf(address: address):
    return(self.accounts[address].balance)

def getName():
    return(self.name)

def getDecimals():
    return(self.decimals)

def getSymbol():
    return(self.symbol)

def changeTokens(trader, amount):
    self.controller.checkWhitelist(msg.sender)
    if(self.accounts[trader].balance + amount < 0):
        throw()
    self.accounts[trader].balance += amount
    return(1)

def modifySupply(amount):
    self.controller.checkWhitelist(msg.sender)
    self.totalSupply += amount
    return(1)

macro safeToAdd($a, $b):
    $c = $a + $b
    ($c >= $a && $c >= $b)

macro safeToSubtract($a, $b):
    ($b <= $a && (($a - $b) <= $a))
