# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256,int256]:int256, getMarketEvents:[int256]:int256[], getMarketNumOutcomes:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getNumEvents:[int256]:int256, getOneWinningOutcome:[int256,int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSender:[]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, getWinningOutcomes:[int256]:int256[], initializeMarket:[int256,int256[],int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[]]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, returnTags:[int256]:int256[], setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, setWinningOutcomes:[int256,int256[]]:int256]

ORDERS = self.controller.lookup('orders')
extern orders: [checkHash:[int256,int256]:int256, commitOrder:[int256]:int256, fillOrder:[int256,int256,int256,int256]:int256, getAmount:[int256]:int256, getBestAsk:[int256,int256]:int256, getBestBid:[int256,int256]:int256, getID:[int256]:int256, getInfo:[int256]:int256[], getOrder:[int256]:int256[], getOrderOwner:[int256]:int256, getPrice:[int256]:int256, getType:[int256]:int256, makeOrderHash:[int256,int256,int256]:int256, removeOrder:[int256]:int256, saveOrder:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256]

### This allows you to cancel orders on the book

# Warning: subcurrencies/tokens are untrusted contracts
extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/float.sem')

data controller

event logCancelOrder(market: indexed, sender: indexed, fxpPrice, fxpAmount, orderID, outcome, type, cashRefund, sharesRefund, timestamp)

# Order types
macro BID: 1
macro ASK: 2

# Field counts
macro ORDER_FIELDS: 10

def publicCancelOrder(orderID):
    refund()
    MUTEX.acquire()
    self.cancelOrder(msg.sender, orderID)
    MUTEX.release()
    return(1)

#
# Cancellation: cancels an order, if a bid refunds money, if an ask returns shares
# @returns 1 if success, throws on failure
#
# 200k gas
def cancelOrder(sender: address, orderID):
    refund()
    self.controller.checkWhitelist(msg.sender)

    # user can cancel anytime
    # Get info for the order to cancel
    order = ORDERS.getOrder(orderID, outitems = ORDER_FIELDS)
    if(!order[0]):
        ~invalid()
    type = order[1]
    market = order[2]
    fxpAmount = order[3]
    fxpPrice = order[4]
    owner = order[5]
    outcome = order[7]
    moneyEscrowed = order[8]
    sharesEscrowed = order[9]

    # Check the owner
    if(sender != owner):
        ~invalid()

    # Clear the order first
    ORDERS.removeOrder(orderID)
    MARKETS.removeOrderFromMarket(market, orderID)

    self.refundOrder(sender, type, sharesEscrowed, moneyEscrowed, market, outcome)

    # Log cancellation
    log(type = logCancelOrder, market, sender, fxpPrice, fxpAmount, orderID, outcome, type, moneyEscrowed, sharesEscrowed, block.timestamp)
    return(1)

# Issue refunds
def refundOrder(sender: address, type, sharesEscrowed, moneyEscrowed, market, outcome):
    refund()
    if(msg.sender != self):
        ~invalid()

    # Return to user sharesEscrowed that weren't filled yet for all outcomes except the order outcome
    if(type == BID and sharesEscrowed):
        i = 1
        while(i <= MARKETS.getMarketNumOutcomes(market)):
            if(i != outcome):
                MARKETS.modifyParticipantShares(market, sender, outcome, sharesEscrowed, 0)
            i += 1

    # Shares refund if has shares escrowed for this outcome
    elif(type == ASK and sharesEscrowed):
        MARKETS.modifyParticipantShares(market, sender, outcome, sharesEscrowed, 0)

    else:
        ~invalid()

    # Return to user moneyEscrowed that wasn't filled yet
    if(moneyEscrowed):
        refunded = INFO.getWallet(market).transfer(sender, moneyEscrowed)
        if(!refunded):
            ~invalid()

    return(1)

def setController(newController):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)
