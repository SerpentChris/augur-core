extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

REPORTING = self.controller.lookup('reporting')
extern reporting: [addDormantRep:[int256,int256,int256]:int256, addRep:[int256,int256,int256]:int256, addReporter:[int256,int256,int256,int256,int256]:int256, adjustActiveRep:[int256,int256]:int256, balanceOfReporter:[int256,int256]:int256, claimInitialRepFromRepContract:[]:int256, getActiveRep:[int256]:int256, getDormantRepByIndex:[int256,int256]:int256, getNumberReporters:[int256]:int256, getRepBalance:[int256,int256]:int256, getRepByIndex:[int256,int256]:int256, getReportedOnNonFinalRoundTwoEvent:[int256,int256]:int256, getReporterID:[int256,int256]:int256, getReputation:[int256]:int256[], getTotalRep:[int256]:int256, repIDToIndex:[int256,int256]:int256, setInitialReporters:[int256]:int256, setRep:[int256,int256,int256]:int256, setReportedOnNonFinalRoundTwoEvent:[int256,int256,int256]:int256, subtractDormantRep:[int256,int256,int256]:int256, subtractRep:[int256,int256,int256]:int256, totalSupply:[int256]:int256]

EVENTS = self.controller.lookup('events')
extern events: [addMarket:[int256,int256]:int256, addPast24:[int256]:int256, addReportersPaidSoFar:[int256]:int256, getBond:[int256]:int256, getChallenged:[int256]:int256, getCreationTime:[int256]:int256, getEarlyResolutionBond:[int256]:int256, getEthics:[int256]:int256, getEventBranch:[int256]:int256, getEventInfo:[int256]:int256[], getEventPushedUp:[int256]:int256, getEventResolution:[int256]:bytes, getExpiration:[int256]:int256, getExtraBond:[int256]:int256, getExtraBondPoster:[int256]:int256, getFirstPreliminaryOutcome:[int256]:int256, getForkEthicality:[int256]:int256, getForkOutcome:[int256]:int256, getForkResolveAddress:[int256]:int256, getForked:[int256]:int256, getForkedDone:[int256]:int256, getMarket:[int256,int256]:int256, getMarkets:[int256]:int256[], getMaxValue:[int256]:int256, getMinValue:[int256]:int256, getMode:[int256]:int256, getNumMarkets:[int256]:int256, getNumOutcomes:[int256]:int256, getOriginalExpiration:[int256]:int256, getOutcome:[int256]:int256, getPast24:[int256]:int256, getRejected:[int256]:int256, getRejectedPeriod:[int256]:int256, getReportersPaidSoFar:[int256]:int256, getReportingThreshold:[int256]:int256, getResolutionAddress:[int256]:int256, getResolutionLength:[int256]:int256, getResolveBondPoster:[int256]:int256, getUncaughtOutcome:[int256]:int256, initializeEvent:[int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256]:int256, setBond:[int256,int256]:int256, setBranch:[int256,int256]:int256, setChallenged:[int256]:int256, setCreationTime:[int256]:int256, setEarlyResolutionBond:[int256,int256]:int256, setEthics:[int256,int256]:int256, setEventPushedUp:[int256,int256]:int256, setExpiration:[int256,int256]:int256, setExtraBond:[int256,int256]:int256, setExtraBondPoster:[int256,int256]:int256, setFirstPreliminaryOutcome:[int256,int256]:int256, setForkDone:[int256]:int256, setForkEthicality:[int256,int256]:int256, setForkOutcome:[int256,int256]:int256, setForked:[int256]:int256, setMode:[int256,int256]:int256, setOriginalExpiration:[int256,int256]:int256, setOutcome:[int256,int256]:int256, setRejected:[int256,int256]:int256, setThreshold:[int256,int256]:int256, setUncaughtOutcome:[int256,int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addOrder:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getLastOrder:[int256]:int256, getLastOutcomePrice:[int256,int256]:int256, getMarketEvent:[int256,int256]:int256, getMarketEvents:[int256]:int256[], getMarketNumOutcomes:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getNumEvents:[int256]:int256, getOneWinningOutcome:[int256,int256]:int256, getOrderIDs:[int256]:int256[], getOriginalTradingPeriod:[int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPrevID:[int256,int256]:int256, getPushedForward:[int256]:int256, getSender:[]:int256, getSharesPurchased:[int256,int256]:int256, getSharesValue:[int256]:int256, getTotalOrders:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, getVolume:[int256]:int256, getWinningOutcomes:[int256]:int256[], initializeMarket:[int256,int256[],int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[]]:int256, modifyParticipantShares:[int256,int256,int256,int256,int256]:int256, modifyShares:[int256,int256,int256]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, removeOrderFromMarket:[int256,int256]:int256, returnTags:[int256]:int256[], setPrice:[int256,int256,int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, setWinningOutcomes:[int256,int256[]]:int256]

BACKSTOPS = self.controller.lookup('backstops')
extern backstops: [adjForkBondPaid:[int256,int256]:int256, doRoundTwoRefund:[int256,int256]:int256, getBondAmount:[int256]:int256, getBondPaid:[int256]:int256, getBondPoster:[int256]:int256, getBondReturned:[int256]:int256, getDisputedOverEthics:[int256]:int256, getFinal:[int256]:int256, getForkBondPaid:[int256]:int256, getForkBondPoster:[int256]:int256, getForkedOverEthicality:[int256]:int256, getMoved:[int256]:int256, getOriginalBranch:[int256]:int256, getOriginalEthicality:[int256]:int256, getOriginalOutcome:[int256]:int256, getOriginalVotePeriod:[int256]:int256, getResolved:[int256,int256]:int256, getRoundTwo:[int256]:int256, increaseBondPaid:[int256,int256]:int256, setBondAmount:[int256,int256]:int256, setBondPoster:[int256,int256]:int256, setBondReturned:[int256]:int256, setDisputedOverEthics:[int256]:int256, setFinal:[int256]:int256, setForkBondPoster:[int256,int256]:int256, setForkedOverEthicality:[int256]:int256, setMoved:[int256]:int256, setOriginalBranch:[int256,int256]:int256, setOriginalEthicality:[int256,int256]:int256, setOriginalOutcome:[int256,int256]:int256, setOriginalVotePeriod:[int256,int256]:int256, setResolved:[int256,int256,int256]:int256, setRoundTwo:[int256,int256]:int256, setRoundTwoRefund:[int256,int256]:int256]

SENDREP = self.controller.lookup('sendReputation')
extern sendReputation: [allowance:[int256,int256,int256]:int256, approve:[int256,int256,int256]:int256, claimRep:[]:int256, sendRepFrom:[int256,int256,int256,int256]:int256, transferFrom:[int256,int256,int256,int256]:int256]

ROUNDTWO = self.controller.lookup('roundTwo')
extern roundTwo: [ok:[]:int256, resolve:[int256,int256]:int256, roundTwoPostBond:[int256,int256,int256,int256]:int256, roundTwoResolve:[int256,int256,int256,int256]:int256]

EXPEVENTS = self.controller.lookup('expiringEvents')
extern expiringEvents: [addEvent:[int256,int256,int256,int256,int256,int256,int256]:int256, addReportToReportsSubmitted:[int256,int256,int256]:int256, addRoundTwo:[int256,int256]:int256, addToWeightOfReport:[int256,int256,int256,int256]:int256, adjustPeriodFeeValue:[int256,int256,int256]:int256, countReportAsSubmitted:[int256,int256,int256,int256,int256]:int256, deleteEvent:[int256,int256,int256]:int256, getActiveReporters:[int256,int256,int256,int256]:int256[], getAfterFork:[int256,int256]:int256, getAfterRep:[int256,int256,int256]:int256, getBeforeRep:[int256,int256,int256]:int256, getCurrentMode:[int256,int256]:int256, getCurrentModeItems:[int256,int256]:int256, getEthicReport:[int256,int256,int256,int256]:int256, getEvent:[int256,int256,int256]:int256, getEventIndex:[int256,int256,int256]:int256, getEventWeight:[int256,int256,int256]:int256, getEvents:[int256,int256]:int256[], getEventsRange:[int256,int256,int256,int256]:int256[], getFeeValue:[int256,int256]:int256, getLesserReportNum:[int256,int256,int256]:int256, getNumActiveReporters:[int256,int256]:int256, getNumEventsToReportOn:[int256,int256]:int256, getNumRemoved:[int256,int256]:int256, getNumReportsSubmitted:[int256,int256,int256]:int256, getNumRequired:[int256,int256]:int256, getNumRoundTwo:[int256,int256]:int256, getNumberEvents:[int256,int256]:int256, getPeriodDormantRep:[int256,int256,int256]:int256, getPeriodRepWeight:[int256,int256,int256]:int256, getReport:[int256,int256,int256,int256]:int256, getReportHash:[int256,int256,int256,int256]:int256, getReportsCommitted:[int256,int256,int256]:int256, getRequired:[int256,int256,int256]:int256, getSaltyEncryptedHash:[int256,int256,int256,int256]:int256, getSubsidy:[int256,int256,int256]:int256, getWeightOfReport:[int256,int256,int256]:int256, moveEvent:[int256,int256]:int256, refundCost:[int256,int256,int256,int256]:int256, removeEvent:[int256,int256]:int256, setAfterRep:[int256,int256,int256,int256]:int256, setBeforeRep:[int256,int256,int256,int256]:int256, setCurrentMode:[int256,int256,int256]:int256, setCurrentModeItems:[int256,int256,int256]:int256, setEthicReport:[int256,int256,int256,int256,int256]:int256, setEventRequired:[int256,int256,int256]:int256, setEventWeight:[int256,int256,int256,int256]:int256, setLesserReportNum:[int256,int256,int256,int256]:int256, setNumEventsToReportOn:[int256]:int256, setPeriodDormantRep:[int256,int256,int256,int256]:int256, setPeriodRepWeight:[int256,int256,int256,int256]:int256, setReport:[int256,int256,int256,int256,int256]:int256, setReportHash:[int256,int256,int256,int256,int256]:int256, setSaltyEncryptedHash:[int256,int256,int256,int256,int256]:int256]

CREATEBRANCH = self.controller.lookup('createBranch')
extern createBranch: [createSubbranch:[bytes,int256,int256,int256,int256,int256]:int256]

CONSENSUSDATA = self.controller.lookup('consensusData')
extern consensusData: [decreaseDenominator:[int256,int256,int256]:int256, doRefund:[int256,int256]:int256, getBaseReportersLastPeriod:[int256]:int256, getDenominator:[int256,int256]:int256, getFeeFirst:[int256,int256]:int256, getFeesCollected:[int256,int256,int256,int256]:int256, getNotEnoughPenalized:[int256,int256,int256]:int256, getPenalized:[int256,int256,int256,int256]:int256, getPenalizedNum:[int256,int256,int256]:int256, getPenalizedUpTo:[int256,int256]:int256, getPeriodBalance:[int256,int256]:int256, getRepCollected:[int256,int256,int256]:int256, getRepRedistributionDone:[int256,int256]:int256, getSlashed:[int256,int256,int256]:int256, increaseDenominator:[int256,int256,int256]:int256, increasePenalizedNum:[int256,int256,int256,int256]:int256, setBaseReportersLastPeriod:[int256,int256]:int256, setFeeFirst:[int256,int256,int256]:int256, setFeesCollected:[int256,int256,int256,int256]:int256, setNotEnoughPenalized:[int256,int256,int256]:int256, setPenalized:[int256,int256,int256,int256]:int256, setPenalizedUpTo:[int256,int256,int256]:int256, setPeriodBalance:[int256,int256,int256]:int256, setRefund:[int256,int256]:int256, setRepCollected:[int256,int256,int256]:int256, setSlashed:[int256,int256,int256]:int256]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

extern forkResolveContract: [resolveFork:[int256]:int256]

inset('../macros/refund.sem')
inset('../macros/eventHelpers.sem')
inset('../macros/float.sem')

data controller

macro FORK_TEXT: text("fork")
macro POINT_ZERO_ONE: 10000000000000000
macro COST_FOR_EVENT_REPORT_CALCULATION: 500000

def init():
    self.controller = 0x0

def scalarOrCategoricalForkResolve(branch, event, bond, periodLength, votingPeriodEvent, winner):
    mode = 0
    ethical = 0
    # original parent won
    if(winner == branch):
        mode = EVENTS.getUncaughtOutcome(event)
        ethical = ethicCatch(EVENTS.getEthics(event))
        # remove event from child if parent was the winning branch
        if(EVENTS.getEventPushedUp(event)):
            # delete old event from future events exp
            child = BRANCHES.getMostRecentChild(branch)
            period = safeDiv(EVENTS.getOriginalExpiration(event), periodLength)
            EXPEVENTS.removeEvent(child, period)
            EXPEVENTS.deleteEvent(child, period, event)
            EVENTS.setOriginalExpiration(event, EVENTS.getExpiration(event))
    # fork won
    else:
        mode = EVENTS.getForkOutcome(event)
        ethical = ethicCatch(EVENTS.getForkEthicality(event))
        # remove event from parent if child was the winning branch
        if(EVENTS.getEventPushedUp(event)):
            # delete old event from future events exp
            period = safeDiv(EVENTS.getOriginalExpiration(event), periodLength)
            EXPEVENTS.removeEvent(branch, period)
            EXPEVENTS.deleteEvent(branch, period, event)
            EVENTS.setOriginalExpiration(event, EVENTS.getExpiration(event))
    branch = winner
    EVENTS.setMode(event, mode)
    EVENTS.setEthics(event, ethical)
    scaledMax = EVENTS.getMaxValue(event)
    scaledMin = EVENTS.getMinValue(event)
    if(categorical(event)):
        scaledMin = ONE
        scaledMax = ONE * EVENTS.getNumOutcomes(event)
    fxpOutcome = safeFxpMul(mode, (scaledMax - scaledMin)) + scaledMin
    if(categorical(event)):
        fxpOutcome = round(fxpOutcome)
    ethicOutcome = safeFxpMul(ONE_HALF, (scaledMax - scaledMin)) + scaledMin
    # outcome of 1 is 1/10**18 or basically 0, but allows us to still check if outcome is 0 or not to see if an outcome has been set
    if(ethicOutcome == 0):
        ethicOutcome = 1
    if(fxpOutcome == 0):
        fxpOutcome = 1
    EVENTS.setOutcome(event, fxpOutcome)
    if(mode == ONE_HALF and EVENTS.getEventPushedUp(event)):
        if(MARKETS.getPushedForward(market)):
            # look @ total shares purchase cutoff times for early resolution bonds
            amount = EVENTS.getEarlyResolutionBond(event)
            branchWallet = BRANCHES.getBranchWallet(branch, INFO.getCurrency(market))
            if(amount && !INFO.getWallet(market).transfer(branchWallet, amount)):
                throw()
        MARKETS.setTradingPeriod(market, MARKETS.getOriginalTradingPeriod(market))
        MARKETS.setPushedForward(market, 0, msg.sender)
        EXPEVENTS.setEventWeight(branch, votingPeriodEvent, event, 0)
        # set outcome to 0
        EVENTS.setOutcome(event, 0)
        EVENTS.setMode(event, 0)
        EVENTS.setEthics(event, 0)
        # set uncaughtoutcome to 0
        EVENTS.setUncaughtOutcome(event, 0)
        EVENTS.setEventPushedUp(event, 0)
        # need to store which period it was "rejected" in
        EVENTS.setRejected(event, votingPeriodEvent)
        # set $event expiration to be the old date
        EVENTS.setExpiration(event, EVENTS.getOriginalExpiration(event))
    elif(mode == ONE_HALF or !ethical):
        # not ethical is same as .5 outcome
        EVENTS.setOutcome(event, ethicOutcome)
        if(EVENTS.getChallenged(event) && !BACKSTOPS.getRoundTwo(event) && EVENTS.getFirstPreliminaryOutcome(event) != EVENTS.getOutcome(event)):
            # pay half of validity bond to challenger
            if(!INFO.getWallet(event).transfer(EVENTS.getExtraBondPoster(event), bond / 2)):
                throw()
            bond -= bond / 2
        branchWallet = BRANCHES.getBranchWallet(branch, INFO.getCurrency(event))
        # give $event bond money to reporters
        if(!INFO.getWallet(event).transfer(branchWallet, bond)):
            throw()
    else:
        bond = EVENTS.getBond(event)
        if(EVENTS.getChallenged(event) && !BACKSTOPS.getRoundTwo(event) && EVENTS.getFirstPreliminaryOutcome(event) != EVENTS.getOutcome(event)):
            # pay half of validity bond to challenger
            if(!INFO.getWallet(event).transfer(EVENTS.getExtraBondPoster(event), bond / 2)):
                throw()
            bond -= bond / 2
        # return bond as a normal event resolution
        if(!INFO.getWallet(event).transfer(INFO.getCreator(event), bond)):
            throw()
        market = EVENTS.getMarket(event, 0)
        if(MARKETS.getPushedForward(market)):
            amount = EVENTS.getEarlyResolutionBond(event)
            if(amount && !INFO.getWallet(market).transfer(MARKETS.getBondsMan(market), amount)):
                throw()
        if(EVENTS.getEventPushedUp(event)):
            # delete old event from future events exp
            period = safeDiv(EVENTS.getOriginalExpiration(event), periodLength)
            EXPEVENTS.removeEvent(branch, period)
            EXPEVENTS.deleteEvent(branch, period, event)
            EVENTS.setOriginalExpiration(event, EVENTS.getExpiration(event))
    handleFirstResolverBond()
    EVENTS.setBranch(event, winner)
    BACKSTOPS.setMoved(event)
    return(1)


macro handleFirstResolverBond():
    resolverBondPoster = EVENTS.getResolveBondPoster(event)

    # if different outcome then first resolver bond goes to reporters, any other normal case it is returned
    if(EVENTS.getFirstPreliminaryOutcome(event) != EVENTS.getOutcome(event)):
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), FIRST_RESOLVE_BOND) && REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, branch), FIRST_RESOLVE_BOND)
    else:
        REPORTING.subtractRep(branch, REPORTING.repIDToIndex(branch, event), FIRST_RESOLVE_BOND) && REPORTING.addRep(branch, REPORTING.repIDToIndex(branch, resolverBondPoster), FIRST_RESOLVE_BOND)