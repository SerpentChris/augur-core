# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

INFO = self.controller.lookup('info')
extern info: [getCreationFee:[int256]:int256, getCreator:[int256]:int256, getCurrency:[int256]:int256, getDescription:[int256]:bytes, getDescriptionLength:[int256]:int256, getWallet:[int256]:int256, setCurrencyAndWallet:[int256,int256,int256]:int256, setInfo:[int256,bytes,int256,int256,int256,int256]:int256]

inset('../macros/refund.sem')

# Keeps track of data about events in augur
# Events' index is the event
# so max-min/numOutcomes is interval between outcomes (useful for ui for categoricals, e.g. 1 is >50, 2 is >100, etc.)
# markets keeps track of the markets associated with an event
# threshold is the min "random" sha threshold for reporting on an event used in the scenario where no one reports on an event
# mode is the mode reported value for a given event [only on categorical / scalar events]
# uncaughtOutcome is the average reported value for a binary event
# ethical is the ethicality for a given event
# originalExp is original expiry date in the case an event was pushed into a later period [backstops] or attempted to resolve early [pushed forward] and the expiration date gets changed - both are in epoch time
# pushedUp states that an event was pushed forward to attempt early resolution
# rejected states that a pushed forward market's event [so one that attempted to resolve before it was expired] got rejected and shouldn't have actually been pushed forward
    # rejectedPeriod is the period such an event was pushed forward to and failed to be resolved in
# bond is the indeterminate bond that's taken away if an event is reported on as indeterminate
# forked is whether an event was the event a branch was forked over
# forkOver is whether the event that was forked over is resolved
# forkOutcome is the outcome of an event that was forked over
# forkEthicality is the ethicality of an event that was forked over
# resolutionSource is a string with the recommended source for resolving a market
# resolutionAddress is the address used to resolve an event in the beginning
# extraBond is a bond to challenge the initial resolution
# firstPreliminaryOutcome is the outcome submitted by the resolutionAddress
# challenged is whether an event has been challenged already
# resolveBondPoster is the address which posted the rep bond for the first resolution period
# earlyResolutionBond is the bond paid for early resolution of an event
# creationTime is the block timestamp when a given event is created
# forkResolveAddress is the address for an event to use to resolve a fork, it's an optional parameter so may be 0 if the event chooses to use the default fork resolution, that contract address should whitelist forking.se
# extraBondPoster is the address that posted the extra bond for challenging the first wave of resolution
data Events[](branch, expirationDate, outcome, fxpMinValue, fxpMaxValue, numOutcomes, markets[], numMarkets, threshold, mode, uncaughtOutcome, ethical, originalExp, rejected, rejectedPeriod, bond, forked, forkOver, forkOutcome, forkEthicality, resolutionSource[], resolutionSourceLength, pushedUp, reportersPaidSoFarForEvent, resolutionAddress, extraBond, firstPreliminaryOutcome, challenged, resolveBondPoster, earlyResolutionBond, creationTime, forkResolveAddress, extraBondPoster)

# Keeps track of number of events created in the past 24 hours
data past24Hours[]

data controller

event logOutcome(event:indexed, outcome)

def init():
    self.controller = 0x0

def getForkResolveAddress(event):
    return(self.Events[event].forkResolveAddress)

def getCreationTime(event):
    return(self.Events[event].creationTime)

def setCreationTime(event):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].creationTime = block.timestamp
    return(1)

def getResolveBondPoster(event):
    return(self.Events[event].resolveBondPoster)

def getChallenged(event):
    return(self.Events[event].challenged)

def setChallenged(event):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].challenged = 1
    return(1)

# @return fxp
def getFirstPreliminaryOutcome(event):
    return(self.Events[event].firstPreliminaryOutcome)

def setFirstPreliminaryOutcome(event, outcome):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].firstPreliminaryOutcome = outcome
    return(1)

def getReportersPaidSoFar(event):
    return(self.Events[event].reportersPaidSoFarForEvent)

def addReportersPaidSoFar(event):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].reportersPaidSoFarForEvent += 1
    return(1)

def getEventPushedUp(event):
    return(self.Events[event].pushedUp)

def getResolutionAddress(event):
    return(self.Events[event].resolutionAddress)

def setEventPushedUp(event, val):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].pushedUp = val
    return(1)

# @return fxp
def getForkOutcome(event):
    whitelist = self.controller.checkWhitelist(msg.sender)
    if(msg.sender == INFO.getCreator(event) or whitelist):
        return(self.Events[event].forkOutcome)
    else:
        log(type = logOutcome, event, self.Events[event].forkOutcome)

def setForkOutcome(event, value):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].forkOutcome = value
    return(1)

# @return fxp
def getForkEthicality(event):
    return(self.Events[event].forkEthicality)

def setForkEthicality(event, value):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].forkEthicality = value
    return(1)

def getForked(event):
    return(self.Events[event].forked)

def setForked(event):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].forked = 1
    return(1)

def setForkDone(event):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].forkOver = 1
    return(1)

def getForkedDone(event):
    return(self.Events[event].forkOver)

def getEventResolution(event):
    resLen = self.Events[event].resolutionSourceLength
    return(load(self.Events[event].resolutionSource[0], chars = resLen): str)

def getEventInfo(event):
    eventInfo = array(8)
    eventInfo[0] = self.Events[event].branch
    eventInfo[1] = self.Events[event].expirationDate
    eventInfo[2] = self.Events[event].outcome
    eventInfo[3] = self.Events[event].fxpMinValue
    eventInfo[4] = self.Events[event].fxpMaxValue
    eventInfo[5] = self.Events[event].numOutcomes
    eventInfo[6] = self.Events[event].bond
    eventInfo[7] = self.Events[event].resolutionAddress
    return(eventInfo: arr)

def getResolutionLength(event):
    return(self.Events[event].resolutionSourceLength)

def getPast24(period):
    return(self.past24Hours[period])

def addPast24(period):
    self.controller.checkWhitelist(msg.sender)
    self.past24Hours[period] += 1
    return(1)

def getExpiration(event):
    return(self.Events[event].expirationDate)

def getOriginalExpiration(event):
    return(self.Events[event].originalExp)

def setOriginalExpiration(event, date):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].originalExp = date
    return(1)

def setExpiration(event, date):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].expirationDate = date
    return(1)

def setBranch(event, branch):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].branch = branch
    return(1)

def setExtraBond(event, extraBond):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].extraBond = extraBond
    return(1)

# @return fxp
def getOutcome(event):
    whitelist = self.controller.checkWhitelist(msg.sender)
    if(msg.sender == INFO.getCreator(event) or whitelist):
        return(self.Events[event].outcome)
    else:
        log(type = logOutcome, event, self.Events[event].outcome)

# @return fxp
def getEthics(event):
    return(self.Events[event].ethical)

def setEthics(event, ethicality):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].ethical = ethicality
    return(ethicality)

# @return fxp
def getMinValue(event):
    return(self.Events[event].fxpMinValue)

# @return fxp
def getMaxValue(event):
    return(self.Events[event].fxpMaxValue)

def getNumOutcomes(event):
    return(self.Events[event].numOutcomes)

def setUncaughtOutcome(event, outcome):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].uncaughtOutcome = outcome
    return(1)

# @return fxp
def getUncaughtOutcome(event):
    self.controller.checkWhitelist(msg.sender)
    return(self.Events[event].uncaughtOutcome)

def initializeEvent(ID, branch, expirationDate, fxpMinValue, fxpMaxValue, numOutcomes, resolution: str, resolutionAddress, resolveBondPoster, forkResolveAddress):
    self.controller.checkWhitelist(msg.sender)
    if(!self.Events[ID].expirationDate):
        self.Events[ID].branch = branch
        self.Events[ID].expirationDate = expirationDate
        self.Events[ID].originalExp = expirationDate
        self.Events[ID].fxpMinValue = fxpMinValue
        self.Events[ID].fxpMaxValue = fxpMaxValue
        self.Events[ID].numOutcomes = numOutcomes
        self.Events[ID].resolveBondPoster = resolveBondPoster
        resolutionSourceLength = len(resolution)
        self.Events[ID].resolutionSourceLength = resolutionSourceLength
        save(self.Events[ID].resolutionSource[0], resolution, chars=resolutionSourceLength)
        self.Events[ID].creationTime = block.timestamp
        self.Events[ID].resolutionAddress = resolutionAddress
        self.Events[ID].forkResolveAddress = forkResolveAddress
        return(1)
    else:
        return(0)

def setBond(event, bond):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].bond = bond
    return(1)

def getEarlyResolutionBond(event):
    return(self.Events[event].earlyResolutionBond)

def setEarlyResolutionBond(event, bond):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].earlyResolutionBond = bond
    return(1)

def addMarket(event, market):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].markets[self.Events[event].numMarkets] = market
    self.Events[event].numMarkets += 1
    return(1)

def getEventBranch(event):
    return(self.Events[event].branch)

# @return fxp
def getExtraBond(event):
    return(self.Events[event].extraBond)

# @return fxp
def getBond(event):
    return(self.Events[event].bond)

def getMarkets(event):
    i = 0
    markets = array(self.Events[event].numMarkets)
    while(i < self.Events[event].numMarkets):
        markets[i] = self.Events[event].markets[i]
        i += 1
    return(markets: arr)

def getMarket(event, marketIndex):
    return(self.Events[event].markets[marketIndex])

def getNumMarkets(event):
    return(self.Events[event].numMarkets)

def setOutcome(ID, outcome):
    self.controller.checkWhitelist(msg.sender)
    self.Events[ID].outcome = outcome
    return(1)

# @return fxp
def getReportingThreshold(event):
    return(self.Events[event].threshold)

def setThreshold(event, threshold):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].threshold = threshold
    return(1)

# @return fxp
def getMode(event):
    whitelist = self.controller.checkWhitelist(msg.sender)
    if(msg.sender == INFO.getCreator(event) or whitelist):
        return(self.Events[event].mode)

def setMode(event, mode):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].mode = mode
    return(1)

def setRejected(event, period):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].rejected = 1
    self.Events[event].rejectedPeriod = period
    return(1)

def getRejected(event):
    return(self.Events[event].rejected)

def getRejectedPeriod(event):
    return(self.Events[event].rejectedPeriod)

def setExtraBondPoster(event, poster):
    self.controller.checkWhitelist(msg.sender)
    self.Events[event].extraBondPoster = poster
    return(1)

def getExtraBondPoster(event):
    return(self.Events[event].extraBondPoster)