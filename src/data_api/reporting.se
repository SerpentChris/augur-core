# This software (Augur) allows buying and selling event outcomes in ethereum
# Copyright (C) 2015 Forecast Foundation OU
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful, #    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
# Any questions please contact joey@augur.net

extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

BRANCHES = self.controller.lookup('branches')
extern branches: [addCurrency:[int256,int256,int256,int256]:int256, addMarketToBranch:[int256,int256]:int256, disableCurrency:[int256,int256]:int256, getBaseReporters:[int256]:int256, getBranchByNum:[int256]:int256, getBranchCurrency:[int256,int256]:int256, getBranchWallet:[int256,int256]:int256, getBranches:[]:int256[], getBranchesStartingAt:[int256]:int256[], getCreationDate:[int256]:int256, getCurrencyActive:[int256,int256]:int256, getCurrencyByContract:[int256,int256]:int256, getCurrencyRate:[int256,int256]:int256, getEventForkedOver:[int256]:int256, getForkPeriod:[int256]:int256, getForkTime:[int256]:int256, getInitialBalance:[int256,int256,int256]:int256, getMarketIDsInBranch:[int256,int256,int256]:int256[], getMinTradingFee:[int256]:int256, getMostRecentChild:[int256]:int256, getNumBranches:[]:int256, getNumCurrencies:[int256]:int256, getNumMarketsBranch:[int256]:int256, getOracleOnly:[int256]:int256, getParent:[int256]:int256, getParentPeriod:[int256]:int256, getPeriodLength:[int256]:int256, getVotePeriod:[int256]:int256, incrementPeriod:[int256]:int256, initializeBranch:[int256,int256,int256,int256,int256,int256,int256,int256,int256]:int256, reactivateCurrency:[int256,int256]:int256, removeLastCurrency:[int256]:int256, replaceCurrency:[int256,int256,int256,int256,int256]:int256, setBaseReporters:[int256,int256]:int256, setEventForkedOver:[int256,int256]:int256, setForkPeriod:[int256]:int256, setInitialBalance:[int256,int256,int256,int256]:int256, setMostRecentChild:[int256,int256]:int256, updateCurrencyRate:[int256,int256,int256,int256]:int256, updateNumCurrencies:[int256,int256]:int256]

# in final version should be actual repcontract address on the mainnet
REPCONTRACT = self.controller.lookup('repContract')
extern repContract: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, getRidOfDustForLaunch:[]:int256, getSeeded:[]:uint256, name:[]:uint256, setSaleDistribution:[address[],uint256[]]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')

# Storage of all data associated with reporters
    # Reporting index is the branch
    # Reputation index is the index of the reporter
    # RepIDtoIndex returns a reporter's reputation[] index given their reputationID as the key
    # total rep is all the rep in augur
    # active rep is the fxpAmount which is actually active
    # fork is the child branch of a parent which forked
    # fxpDormant rep stores fxpDormant rep values
    # reportedOnNonFinalRoundTwoEvent is the eventID if a person reported on a round 2 event before it was in the second round [i.e. the first reporting backstop], they cannot convert their rep to dormant or send rep until they've finished the resolution process for that round 2 event, set this to 0 once the event is final
data Reporting[](reputation[](repValue, reporterID), numberReporters, repIDtoIndex[], totalRep, dormantRep[](repValue, reporterID), activeRep, reportedOnNonFinalRoundTwoEvent[])

data controller

def init():
    self.controller = 0x0
    REPCONTRACT = self.controller.lookup('repContract')
    self.Reporting[1010101].repIDtoIndex[1010101] = 0
    redistributionRep = REPCONTRACT.balanceOf(0x0000000000000000000000000000000000000000)
    self.Reporting[1010101].reputation[0].repValue = redistributionRep
    self.Reporting[1010101].reputation[0].reporterID = 1010101
    self.Reporting[1010101].dormantRep[0].reporterID = 1010101
    self.Reporting[1010101].numberReporters = 2
    self.Reporting[1010101].repIDtoIndex[msg.sender] = 1
    self.Reporting[1010101].reputation[1].repValue = 0
    self.Reporting[1010101].reputation[1].reporterID = msg.sender
    self.Reporting[1010101].dormantRep[1].reporterID = msg.sender
    self.Reporting[1010101].repIDtoIndex[msg.sender] = 1
    self.Reporting[1010101].activeRep += redistributionRep
    self.Reporting[1010101].totalRep += redistributionRep

def getReportedOnNonFinalRoundTwoEvent(branch, reporter):
    return(self.Reporting[branch].reportedOnNonFinalRoundTwoEvent[reporter])

def setReportedOnNonFinalRoundTwoEvent(branch, event, reporter):
    self.controller.checkWhitelist(msg.sender)
    self.Reporting[branch].reportedOnNonFinalRoundTwoEvent[reporter] = event
    return(1)

# @return fxp
def getActiveRep(branch):
    return(self.Reporting[branch].activeRep)

def adjustActiveRep(branch, fxpAmount):
    self.controller.checkWhitelist(msg.sender)
    self.Reporting[branch].activeRep += fxpAmount
    return(1)

# @return fxp
def getRepByIndex(branch, repIndex):
    return(self.Reporting[branch].reputation[repIndex].repValue)

# @return fxp
def getRepBalance(branch, address):
    repIndex = self.Reporting[branch].repIDtoIndex[address]
    if(!repIndex and self.Reporting[branch].reputation[repIndex].reporterID != address):
        throw()
    return(self.Reporting[branch].reputation[repIndex].repValue)

def getDormantRepByIndex(branch, repIndex):
    return(self.Reporting[branch].dormantRep[repIndex].repValue)

# getDormantRepBalance
# @return fxp
def balanceOfReporter(branch, address):
    repIndex = self.Reporting[branch].repIDtoIndex[address]
    if(!repIndex and self.Reporting[branch].reputation[repIndex].reporterID != address):
        return(0)
    return(self.Reporting[branch].dormantRep[repIndex].repValue)

# return total supply of fxpDormant rep
# @return fxp
def totalSupply(branch):
    return(self.Reporting[branch].totalRep - self.Reporting[branch].activeRep)

def getReporterID(branch, index):
    return(self.Reporting[branch].reputation[index].reporterID)

def getTotalRep(branch):
    return(self.Reporting[branch].totalRep)

# will return 0s for array values after it's looped through all the ones you
# have an actual balance in
def getReputation(address):
    branchListCount = BRANCHES.getNumBranches()
    if(address):
        branches = array(2 * branchListCount)
        branchList = array(branchListCount)
        branchList = BRANCHES.getBranches(outitems = branchListCount)
        i = 0
        b = 0
        while(i < branchListCount):
            branch = branchList[i]
            balance = self.getRepBalance(branch, address)
            if(balance != 0):
                branches[b] = branch
                branches[b + 1] = balance
                b += 2
            i += 1
    else:
        address = msg.sender
        branches = array(2 * branchListCount)
        branchList = array(branchListCount)
        branchList = BRANCHES.getBranches(outitems = branchListCount)
        i = 0
        b = 0
        while(i < branchListCount):
            branch = branchList[i]
            balance = self.getRepBalance(branch, address)
            if(balance != 0):
                branches[b] = branch
                branches[b + 1] = balance
                b += 2
            i += 1
    return(branches: arr)

def getNumberReporters(branch):
    return(self.Reporting[branch].numberReporters)

def repIDToIndex(branch, repID):
    repIndex = self.Reporting[branch].repIDtoIndex[repID]
    # means repID didn't matchup with 0 index reporterID
    if(!repIndex and self.Reporting[branch].reputation[repIndex].reporterID != repID):
        throw()
    return(repIndex)

def setInitialReporters(branch):
    self.controller.checkWhitelist(msg.sender)
    # add branch as a "reporter"
    self.Reporting[branch].numberReporters = 1
    self.Reporting[branch].repIDtoIndex[branch] = 0
    self.Reporting[branch].reputation[0].repValue = 0
    self.Reporting[branch].reputation[0].reporterID = branch
    self.Reporting[branch].dormantRep[0].reporterID = branch
    return(1)

def addReporter(branch, sender, fxpAmount, fxpDormant, fxpRepToBonderOrBranch):
    self.controller.checkWhitelist(msg.sender)
    reporterIndex = self.Reporting[branch].numberReporters
    self.Reporting[branch].repIDtoIndex[sender] = reporterIndex
    self.Reporting[branch].reputation[reporterIndex].repValue = fxpAmount
    self.Reporting[branch].reputation[reporterIndex].reporterID = sender
    self.Reporting[branch].dormantRep[reporterIndex].reporterID = sender
    self.Reporting[branch].dormantRep[reporterIndex].repValue = fxpDormant
    self.Reporting[branch].activeRep += fxpAmount + fxpRepToBonderOrBranch
    self.Reporting[branch].totalRep += fxpAmount + fxpDormant + fxpRepToBonderOrBranch
    self.Reporting[branch].numberReporters += 1
    return(1)

def addRep(branch, index, fxpValue):
    self.controller.checkWhitelist(msg.sender)
    self.Reporting[branch].reputation[index].repValue += fxpValue
    return(1)

def subtractRep(branch, index, fxpValue):
    self.controller.checkWhitelist(msg.sender)
    self.Reporting[branch].reputation[index].repValue -= fxpValue
    return(1)

### Test Faucet Function that needs to be removed at launch TODO
def setRep(branch, index, fxpNewRep):
    self.controller.checkWhitelist(msg.sender)
    oldRep = self.Reporting[branch].reputation[index].repValue
    self.Reporting[branch].reputation[index].repValue = fxpNewRep
    self.Reporting[branch].activeRep += fxpNewRep - oldRep
    self.Reporting[branch].totalRep += fxpNewRep - oldRep
    return(1)

def addDormantRep(branch, index, fxpValue):
    self.controller.checkWhitelist(msg.sender)
    self.Reporting[branch].dormantRep[index].repValue += fxpValue
    return(1)

def subtractDormantRep(branch, index, fxpValue):
    self.controller.checkWhitelist(msg.sender)
    self.Reporting[branch].dormantRep[index].repValue -= fxpValue
    return(1)

def claimInitialRepFromRepContract():
    branch = 1010101
    sender = msg.sender
    dormantRep = REPCONTRACT.balanceOf(sender)
    if(!dormantRep):
        throw()
    if(dormantRep != REPCONTRACT.allowance(sender, self)):
        throw()
    if(!REPCONTRACT.transferFrom(sender, 0x0000000000000000000000000000000000000000, dormantRep)):
        throw()
    reporterIndex = self.Reporting[branch].numberReporters
    self.Reporting[branch].repIDtoIndex[sender] = reporterIndex
    self.Reporting[branch].reputation[reporterIndex].reporterID = sender
    self.Reporting[branch].dormantRep[reporterIndex].reporterID = sender
    self.Reporting[branch].dormantRep[reporterIndex].repValue = dormantRep
    self.Reporting[branch].totalRep += dormantRep
    self.Reporting[branch].numberReporters += 1
    return(1)