# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[int256]:int256, checkWhitelist:[int256]:int256]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

extern rateContract: [rateFunction:[]:int256]

extern wallet: [initialize:[int256]:int256, setController:[int256]:int256, suicideFunds:[int256]:_, transfer:[address,uint256]:int256]

inset('../macros/refund.sem')

# Branches keeps track of data associated with branches in augur
# Branches' index is the hash of the branch (aka branch)
# currentVotePeriod is the current index in eventsExpDates and tells us which bucket of events are up to be
# voted on in the current vote period (should always be 1 behind block.timestamp/periodlength or current EventsExpDates index)
# currentExpPeriod = (block.timestamp / self.Branches[branch].periodLength)
# currentExpPeriod - 1 is what's up for reporting at any given time
# periodLength is the length in seconds of the branch's reporting period
# parentPeriod is the period the parent was in when the branch was created [useful for claiming rep after a fork]
# baseReporters the number of reporters which report on a market at a minimum
# forkPeriod is the period a branch was last forked over
# eventForkedOver is the event a branch was last forked over
# parent is the parent branch of the given branch
# How to set minimum reporting fee guidelines for reporters, abs. minimum should be calc. as follows:
    # Volume per period * .5 * fee * ev/ebit * 6 >= rep market cap
    # Say ev/ebit or valuation is 15, so:
    # 45 * fee * volume per period = rep market cap
    # Want:
        # Rep market cap >> outstanding shares value at all times
# min can be no lower than ~0.0000001 or so otherwise can run into underflow issues
# balance[][] takes a branch and currency and gives current balance of it at start of a fee distribution period
# contract[] is a mapping from currency -> wallet contract addr for that currency
# numCurrencies is the number of currencies a branch has
# currencies[] is a 0 indexed list of the n currencies a branch allows with contract being the currency itself, rate being a fixed exchange rate, and rateContract being a contract w/ rates for the currency from currency to eth in wei
# currencyToIndex is a reverse mapping from currencies to their indices
# mostRecentChild is the most recent child of a branch
# currencyActive is whether new markets can be made in that currency
# forkTime is the block timestamp when a fork of this branch was last created
data Branches[](currentVotePeriod, periodLength, markets[], numMarkets, fxpMinTradingFee, balance[][], creationDate, parentPeriod, baseReporters, forkPeriod, eventForkedOver, parent, contract[], numCurrencies, currencies[](rate, rateContract, contract), currencyToIndex[], mostRecentChild, currencyActive[], forkTime)

# keeps track of a list of all branches
data branchList[]
data branchListCount

data controller

def init():
    self.controller = 0x0
    self.Branches[1010101].currentVotePeriod = (block.timestamp / 15) - 1
    self.Branches[1010101].periodLength = 15
    # .2%
    self.Branches[1010101].fxpMinTradingFee = 2000000000000000
    self.branchListCount = 1
    self.branchList[0] = 1010101
    self.Branches[1010101].creationDate = block.timestamp
    # since only have to report on half this targets 3
    self.Branches[1010101].baseReporters = 6
    ethContract = self.controller.lookup("cash")
    self.Branches[1010101].currencies[self.Branches[1010101].numCurrencies].contract = ethContract
    self.Branches[1010101].currencies[self.Branches[1010101].numCurrencies].rate = ONE
    self.Branches[1010101].currencyToIndex[ethContract] = self.Branches[1010101].numCurrencies
    self.Branches[1010101].currencyActive[ethContract] = 1
    self.Branches[1010101].numCurrencies += 1
    noWalletExists = !self.Branches[1010101].contract[ethContract]
    if(noWalletExists):
        wallet = create('../functions/wallet.se')
        wallet.initialize(ethContract)
        self.Branches[1010101].contract[ethContract] = wallet

def updateNumCurrencies(branch, num):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].numCurrencies = num
    return(1)

# rateContract _or_ rate should be given
def addCurrency(branch, currency, rate, rateContract):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].currencies[self.Branches[branch].numCurrencies].contract = currency
    self.Branches[branch].currencies[self.Branches[branch].numCurrencies].rate = rate
    self.Branches[branch].currencies[self.Branches[branch].numCurrencies].rateContract = rateContract
    self.Branches[branch].currencyToIndex[currency] = self.Branches[branch].numCurrencies
    self.Branches[branch].currencyActive[currency] = 1
    self.Branches[branch].numCurrencies += 1
    noWalletExists = !self.Branches[branch].contract[currency]
    if(noWalletExists):
        wallet = create('../functions/wallet.se')
        wallet.initialize(currency)
        self.Branches[branch].contract[currency] = wallet
    return(1)

# disables a given currency for new market / event creation
def disableCurrency(branch, currency):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].currencyActive[currency] = 0
    return(1)

# enables a given currency for new market / event creation
def reactivateCurrency(branch, currency):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].currencyActive[currency] = 1
    return(1)

def replaceCurrency(branch, oldCurrencyIndex, newCurrency, newRate, newRateContract):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].currencyActive[self.Branches[branch].currencies[oldCurrencyIndex].contract] = 0
    self.Branches[branch].currencyToIndex[self.Branches[branch].currencies[oldCurrencyIndex].contract] = 0
    self.Branches[branch].currencies[oldCurrencyIndex].contract = newCurrency
    self.Branches[branch].currencies[oldCurrencyIndex].rate = newRate
    self.Branches[branch].currencies[oldCurrencyIndex].rateContract = newRateContract
    self.Branches[branch].currencyActive[newCurrency] = 1
    self.Branches[branch].currencyToIndex[newCurrency] = oldCurrencyIndex
    noWalletExists = !self.Branches[branch].contract[newCurrency]
    if(noWalletExists):
        wallet = create('../functions/wallet.se')
        wallet.initialize(newCurrency)
        self.Branches[branch].contract[newCurrency] = wallet
    return(1)

def removeLastCurrency(branch):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].currencyToIndex[self.Branches[branch].currencies[self.Branches[branch].numCurrencies - 1].contract] = 0
    self.Branches[branch].contract[self.Branches[branch].currencies[self.Branches[branch].numCurrencies - 1].contract] = 0
    self.Branches[branch].currencies[self.Branches[branch].numCurrencies - 1].contract = 0
    self.Branches[branch].currencies[self.Branches[branch].numCurrencies - 1].rate = 0
    self.Branches[branch].currencies[self.Branches[branch].numCurrencies - 1].rateContract = 0
    self.Branches[branch].currencyActive[self.Branches[branch].numCurrencies - 1] = 0
    self.Branches[branch].numCurrencies -= 1
    return(1)

def updateCurrencyRate(branch, currency, rate, rateContract):
    self.controller.checkWhitelist(msg.sender)
    if(rate == 0 && !rateContract):
        ~invalid()
    self.Branches[branch].currencies[self.Branches[branch].currencyToIndex[currency]].rate = rate
    self.Branches[branch].currencies[self.Branches[branch].currencyToIndex[currency]].rateContract = rateContract
    return(1)

# currency rate should be a number in fixed point 10**18
def getCurrencyRate(branch, currency):
    currencyIndex = self.Branches[branch].currencyToIndex[currency]
    if(self.Branches[branch].currencies[currencyIndex].contract != currency):
        return(0)
    rate = self.Branches[branch].currencies[currencyIndex].rate
    if(rate):
        return(self.Branches[branch].currencies[currencyIndex].rate)
    else:
        return(self.Branches[branch].currencies[currencyIndex].rateContract.rateFunction())

def getBranchCurrency(branch, index):
    return(self.Branches[branch].currencies[index].contract)

def getCurrencyByContract(branch, currency):
    return(self.Branches[branch].currencyToIndex[currency])

def getBranchWallet(branch, currency):
    return(self.Branches[branch].contract[currency])

def getNumCurrencies(branch):
    return(self.Branches[branch].numCurrencies)

def getCurrencyActive(branch, currency):
    return(self.Branches[branch].currencyActive[currency])

# event a branch was most recently forked over
def getEventForkedOver(branch):
    return(self.Branches[branch].eventForkedOver)

def setEventForkedOver(branch, event):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].eventForkedOver = event
    return(1)

def getBaseReporters(branch):
    return(self.Branches[branch].baseReporters)

def setBaseReporters(branch, num):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].baseReporters = num
    return(1)

def getVotePeriod(branch):
    return(self.Branches[branch].currentVotePeriod)

def getPeriodLength(branch):
    return(self.Branches[branch].periodLength)

# branch currency balance at start of the fee distribution period
# @return fxp
def setInitialBalance(branch, period, balance, currency):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].balance[period][currency] = balance
    return(balance)

# @return fxp
def getInitialBalance(branch, period, currency):
    return(self.Branches[branch].balance[period][currency])

def getParent(branch):
    return(self.Branches[branch].parent)

# @return markets in a branch from initial to last
def getMarketIDsInBranch(branch, initial, last):
    numMarkets = last - initial
    markets = array(numMarkets)
    i = 0
    while(i < numMarkets):
        markets[i] = self.Branches[branch].markets[initial+i]
        i += 1
    return(markets: arr)

def getNumMarketsBranch(branch):
    return(self.Branches[branch].numMarkets)

# @return fxp
def getMinTradingFee(branch):
    return(self.Branches[branch].fxpMinTradingFee)

# @return all branches
def getBranches():
    b = 0
    numBranches = self.branchListCount
    branches = array(numBranches)
    while(b < numBranches):
        branches[b] = self.branchList[b]
        b += 1
    return(branches: arr)

def getBranchesStartingAt(index):
    b = index
    numBranches = self.branchListCount
    branches = array(numBranches)
    while(b < numBranches):
        branches[b] = self.branchList[b]
        b += 1
    return(branches: arr)

def getNumBranches():
    return(self.branchListCount)

def getBranchByNum(branchNumber):
    return(self.branchList[branchNumber])

def getCreationDate(ID):
    return(self.Branches[ID].creationDate)

def getMostRecentChild(ID):
    return(self.Branches[ID].mostRecentChild)

def setMostRecentChild(parent, child):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[parent].mostRecentChild = child
    return(1)

# check that msg.sender is one of our function contracts
def initializeBranch(ID, currentVotePeriod, periodLength, fxpMinTradingFee, parentPeriod, parent, ethContract, mostRecentChild):
    self.controller.checkWhitelist(msg.sender)
    if(!self.Branches[ID].periodLength):
        self.Branches[ID].currentVotePeriod = currentVotePeriod
        self.Branches[ID].periodLength = periodLength
        self.Branches[ID].fxpMinTradingFee = fxpMinTradingFee
        self.branchList[self.branchListCount] = ID
        self.branchListCount += 1
        self.Branches[ID].creationDate = block.timestamp
        self.Branches[ID].parentPeriod = parentPeriod
        self.Branches[ID].parent = parent
        self.Branches[ID].baseReporters = self.Branches[parent].baseReporters
        self.Branches[ID].mostRecentChild = mostRecentChild
        self.Branches[ID].currencies[self.Branches[ID].numCurrencies].contract = ethContract
        self.Branches[ID].currencies[self.Branches[ID].numCurrencies].rate = ONE
        self.Branches[ID].currencyToIndex[ethContract] = self.Branches[ID].numCurrencies
        self.Branches[ID].currencyActive[ethContract] = 1
        self.Branches[ID].numCurrencies += 1
        noWalletExists = !self.Branches[ID].contract[ethContract]
        if(noWalletExists):
            wallet = create('../functions/wallet.se')
            wallet.initialize(ethContract)
            self.Branches[ID].contract[ethContract] = wallet
        return(1)
    else:
        return(0)

def getParentPeriod(branch):
    return(self.Branches[branch].parentPeriod)

def incrementPeriod(branch):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].currentVotePeriod += 1
    return(1)

# check that msg.sender is one of our function contracts
def addMarketToBranch(branch, market):
    self.controller.checkWhitelist(msg.sender)
    numMarkets = self.Branches[branch].numMarkets
    self.Branches[branch].markets[numMarkets] = market
    self.Branches[branch].numMarkets += 1
    return(1)

# forkperiod is the vote period in which a branch was forked
def setForkPeriod(branch):
    self.controller.checkWhitelist(msg.sender)
    self.Branches[branch].forkPeriod = self.Branches[branch].currentVotePeriod
    self.Branches[branch].forkTime = block.timestamp
    return(1)

# gets the period in which a branch was most recently forked
def getForkPeriod(branch):
    return(self.Branches[branch].forkPeriod)

# gets the time which a branch was most recently forked
def getForkTime(branch):
    return(self.Branches[branch].forkTime)

def setController(newController):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

def suicideFunds(to):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)